apiVersion: apps/v1
kind: Deployment
metadata:
  name: auth-service
  namespace: my-saas-chat
  labels:
    app: auth-service
    component: backend
    tier: application
spec:
  replicas: 2  # Start with 2, can scale up to 10 with HPA
  selector:
    matchLabels:
      app: auth-service
  template:
    metadata:
      labels:
        app: auth-service
        component: backend
        tier: application
    spec:
      containers:
      - name: auth
        image: my-saas-chat/auth-service:latest
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 3001
          name: http
          protocol: TCP

        env:
        # Application config
        - name: NODE_ENV
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: NODE_ENV
        - name: PORT
          value: "3001"
        - name: LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: LOG_LEVEL

        # Database URLs
        - name: DATABASE_URL
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: DATABASE_URL
        - name: REDIS_URL
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: REDIS_URL

        # Secrets
        - name: AUTH_SECRET
          valueFrom:
            secretKeyRef:
              name: auth-secret
              key: AUTH_SECRET

        # Email config
        - name: REQUIRE_EMAIL_VERIFICATION
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: REQUIRE_EMAIL_VERIFICATION
        - name: FRONTEND_URL
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: FRONTEND_URL

        # Jaeger tracing
        - name: JAEGER_AGENT_HOST
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: JAEGER_AGENT_HOST
        - name: JAEGER_AGENT_PORT
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: JAEGER_AGENT_PORT
        - name: JAEGER_SERVICE_NAME
          value: "auth-service"

        # Optional: Sentry
        - name: SENTRY_DSN
          valueFrom:
            secretKeyRef:
              name: api-keys-secret
              key: SENTRY_DSN
              optional: true

        resources:
          requests:
            memory: "256Mi"
            cpu: "200m"
          limits:
            memory: "512Mi"
            cpu: "500m"

        livenessProbe:
          httpGet:
            path: /health
            port: 3001
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 3
          failureThreshold: 3

        readinessProbe:
          httpGet:
            path: /health
            port: 3001
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 2
          failureThreshold: 3

      # Init container to wait for PostgreSQL
      initContainers:
      - name: wait-for-postgres
        image: postgres:16-alpine
        command:
        - sh
        - -c
        - |
          until pg_isready -h postgres-service -p 5432 -U postgres; do
            echo "Waiting for postgres..."
            sleep 2
          done
