// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String   @id @default(cuid())
  email                String                       // email gốc (hiển thị)
  emailLower           String   @unique             // email đã lowercase (duy nhất)
  passwordHash         String                       // hash mật khẩu (argon2/bcrypt)
  emailVerifiedAt      DateTime?                    // thời điểm xác minh email
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  resetTokens PasswordResetToken[]

  // Quan hệ
  verificationTokens   EmailVerificationToken[]

}

model EmailVerificationToken {
  id        String   @id @default(cuid())
  userId    String
  tokenHash String   @unique                      // lưu HASH của token
  expiresAt DateTime
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expiresAt])
}

model PasswordResetToken {
id         String   @id @default(cuid())
  tokenHash  String   @unique
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt  DateTime
  usedAt     DateTime?
  createdAt  DateTime @default(now())


@@index([userId])
@@index([expiresAt])
}
// ========== Vai trò tin nhắn ==========
enum Role {
  USER
  ASSISTANT
  SYSTEM
}


model Conversation {
  id           String    @id @default(cuid())
  userId       String
  title        String?   @db.VarChar(200)
  systemPrompt String?
  meta         Json?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  messages     Message[]
  attachments  Attachment[]   // thêm dòng này

  @@index([userId, createdAt(sort: Desc)])
}

model Message {
  id               String       @id @default(cuid())
  conversationId   String
  role             Role
  content          String
  model            String?       @db.VarChar(100)
  promptTokens     Int?
  completionTokens Int?
  latencyMs        Int?
  idempotencyKey   String?       @unique
  createdAt        DateTime      @default(now())

  conversation     Conversation  @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  attachments      Attachment[]  // thêm dòng này

  @@index([conversationId, createdAt])
}

model Attachment {
  id             String  @id @default(cuid())
  conversationId String
  messageId      String
  kind           String  @db.VarChar(50)
  url            String
  meta           Json?

  message        Message       @relation(fields: [messageId], references: [id], onDelete: Cascade)
  conversation   Conversation  @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@index([messageId])
  @@index([conversationId])
}
