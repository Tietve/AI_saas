# ================================
# CD Workflow - Deploy to Production
# ================================
# DISABLED: This workflow is for Kubernetes deployment
# Currently using Azure App Service (see azure-webapp.yml)
# Re-enable if switching to Kubernetes in the future
name: CD - Deploy (DISABLED)

on:
  # Disabled - uncomment to re-enable
  # push:
  #   branches: [main]
  #   tags:
  #     - 'v*'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

env:
  NODE_VERSION: '20'
  REGISTRY: ghcr.io
  # IMPORTANT: GHCR requires lowercase repository names
  # Convert 'Tietve/AI_saas' to 'tietve/ai_saas'
  IMAGE_NAME: tietve/ai_saas

jobs:
  # ================================
  # Build & Push Docker Image
  # ================================
  build-image:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache
          cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache,mode=max
          platforms: linux/amd64,linux/arm64

  # ================================
  # Deploy to Kubernetes
  # ================================
  deploy-k8s:
    name: Deploy to Kubernetes
    runs-on: ubuntu-latest
    needs: build-image
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
    environment:
      name: ${{ github.event.inputs.environment || 'production' }}
      url: https://your-domain.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Configure kubeconfig
        env:
          KUBE_CONFIG: ${{ secrets.KUBE_CONFIG }}
        run: |
          mkdir -p $HOME/.kube
          echo "$KUBE_CONFIG" | base64 -d > $HOME/.kube/config
          chmod 600 $HOME/.kube/config

      - name: Update image in deployment
        run: |
          kubectl set image deployment/ai-saas-app \
            app=${{ needs.build-image.outputs.image-tag }} \
            -n ai-saas

      - name: Wait for rollout
        run: |
          kubectl rollout status deployment/ai-saas-app -n ai-saas --timeout=5m

      - name: Verify deployment
        run: |
          kubectl get pods -n ai-saas -l app=ai-saas-app
          kubectl get services -n ai-saas

  # ================================
  # Deploy to Docker Swarm (Alternative)
  # ================================
  deploy-swarm:
    name: Deploy to Docker Swarm
    runs-on: ubuntu-latest
    needs: build-image
    if: false  # Disable by default, enable if using Swarm
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Copy files to server
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          source: "docker-compose.prod.yml,.env.production"
          target: "/opt/ai-saas"

      - name: Deploy via SSH
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          script: |
            cd /opt/ai-saas
            docker stack deploy -c docker-compose.prod.yml ai-saas
            docker service ls

  # ================================
  # Run Database Migrations
  # ================================
  migrate-db:
    name: Run Database Migrations
    runs-on: ubuntu-latest
    needs: deploy-k8s
    if: success()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3

      - name: Configure kubeconfig
        env:
          KUBE_CONFIG: ${{ secrets.KUBE_CONFIG }}
        run: |
          mkdir -p $HOME/.kube
          echo "$KUBE_CONFIG" | base64 -d > $HOME/.kube/config

      - name: Run migrations
        run: |
          kubectl exec -n ai-saas deployment/ai-saas-app -- \
            npx prisma migrate deploy

  # ================================
  # Health Check
  # ================================
  health-check:
    name: Post-Deployment Health Check
    runs-on: ubuntu-latest
    needs: [deploy-k8s, migrate-db]
    if: success()
    steps:
      - name: Wait for services to stabilize
        run: sleep 30

      - name: Check health endpoint
        run: |
          response=$(curl -s -o /dev/null -w "%{http_code}" https://your-domain.com/api/health)
          if [ $response -eq 200 ]; then
            echo "‚úÖ Health check passed"
          else
            echo "‚ùå Health check failed with status: $response"
            exit 1
          fi

      - name: Notify deployment success
        if: success()
        run: |
          echo "üéâ Deployment successful!"
          echo "Version: ${{ github.sha }}"
          echo "URL: https://your-domain.com"

  # ================================
  # Rollback on Failure
  # ================================
  rollback:
    name: Rollback on Failure
    runs-on: ubuntu-latest
    needs: [deploy-k8s, health-check]
    if: failure()
    steps:
      - name: Setup kubectl
        uses: azure/setup-kubectl@v3

      - name: Configure kubeconfig
        env:
          KUBE_CONFIG: ${{ secrets.KUBE_CONFIG }}
        run: |
          mkdir -p $HOME/.kube
          echo "$KUBE_CONFIG" | base64 -d > $HOME/.kube/config

      - name: Rollback deployment
        run: |
          kubectl rollout undo deployment/ai-saas-app -n ai-saas
          kubectl rollout status deployment/ai-saas-app -n ai-saas

      - name: Notify rollback
        run: echo "‚ö†Ô∏è Deployment failed - rolled back to previous version"
