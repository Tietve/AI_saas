# ================================
# Docker Compose - Production
# Multi-instance setup with load balancing
# ================================
# Usage: docker-compose -f docker-compose.prod.yml up -d

version: '3.9'

services:
  # ================================
  # PostgreSQL Database (Production)
  # ================================
  postgres:
    image: postgres:16-alpine
    container_name: ai-saas-postgres-prod
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
      - ./postgres/init:/docker-entrypoint-initdb.d:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ai-saas-prod-network
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 1G

  # ================================
  # Redis Cache (Production)
  # ================================
  redis:
    image: redis:7-alpine
    container_name: ai-saas-redis-prod
    restart: always
    command: >
      redis-server
      --appendonly yes
      --requirepass ${REDIS_PASSWORD}
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
    volumes:
      - redis_prod_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ai-saas-prod-network
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M

  # ================================
  # Next.js Application - Instance 1
  # ================================
  app-1:
    build:
      context: .
      dockerfile: Dockerfile
      target: runner
    container_name: ai-saas-app-1
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - NODE_ENV=production
      - INSTANCE_ID=instance-1
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}?schema=public&connection_limit=10&pool_timeout=20
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - AUTH_SECRET=${AUTH_SECRET}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - GOOGLE_AI_API_KEY=${GOOGLE_AI_API_KEY}
      - PAYOS_CLIENT_ID=${PAYOS_CLIENT_ID}
      - PAYOS_API_KEY=${PAYOS_API_KEY}
      - PAYOS_CHECKSUM_KEY=${PAYOS_CHECKSUM_KEY}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASS=${SMTP_PASS}
      - SMTP_FROM=${SMTP_FROM}
      - NEXT_PUBLIC_APP_URL=${NEXT_PUBLIC_APP_URL}
    networks:
      - ai-saas-prod-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/api/health', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 1G

  # ================================
  # Next.js Application - Instance 2
  # ================================
  app-2:
    build:
      context: .
      dockerfile: Dockerfile
      target: runner
    container_name: ai-saas-app-2
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - NODE_ENV=production
      - INSTANCE_ID=instance-2
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}?schema=public&connection_limit=10&pool_timeout=20
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - AUTH_SECRET=${AUTH_SECRET}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - GOOGLE_AI_API_KEY=${GOOGLE_AI_API_KEY}
      - PAYOS_CLIENT_ID=${PAYOS_CLIENT_ID}
      - PAYOS_API_KEY=${PAYOS_API_KEY}
      - PAYOS_CHECKSUM_KEY=${PAYOS_CHECKSUM_KEY}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASS=${SMTP_PASS}
      - SMTP_FROM=${SMTP_FROM}
      - NEXT_PUBLIC_APP_URL=${NEXT_PUBLIC_APP_URL}
    networks:
      - ai-saas-prod-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/api/health', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 1G

  # ================================
  # Next.js Application - Instance 3
  # ================================
  app-3:
    build:
      context: .
      dockerfile: Dockerfile
      target: runner
    container_name: ai-saas-app-3
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - NODE_ENV=production
      - INSTANCE_ID=instance-3
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}?schema=public&connection_limit=10&pool_timeout=20
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - AUTH_SECRET=${AUTH_SECRET}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - GOOGLE_AI_API_KEY=${GOOGLE_AI_API_KEY}
      - PAYOS_CLIENT_ID=${PAYOS_CLIENT_ID}
      - PAYOS_API_KEY=${PAYOS_API_KEY}
      - PAYOS_CHECKSUM_KEY=${PAYOS_CHECKSUM_KEY}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASS=${SMTP_PASS}
      - SMTP_FROM=${SMTP_FROM}
      - NEXT_PUBLIC_APP_URL=${NEXT_PUBLIC_APP_URL}
    networks:
      - ai-saas-prod-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/api/health', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 1G

  # ================================
  # Nginx Load Balancer
  # ================================
  nginx:
    image: nginx:alpine
    container_name: ai-saas-nginx-lb
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - app-1
      - app-2
      - app-3
    networks:
      - ai-saas-prod-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M

# ================================
# Networks
# ================================
networks:
  ai-saas-prod-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# ================================
# Volumes
# ================================
volumes:
  postgres_prod_data:
    driver: local
  redis_prod_data:
    driver: local
