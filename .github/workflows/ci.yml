# ================================
# CI Workflow - Testing & Building
# ================================
name: CI - Test & Build

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '20'

jobs:
  # ================================
  # Lint & Type Check
  # ================================
  lint:
    name: Lint & Type Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          # cache: 'npm'  # Disabled - package-lock.json not tracked

      - name: Install dependencies
        run: npm install --legacy-peer-deps

      - name: Run ESLint
        run: npm run lint || true

      - name: Run Type Check
        run: npm run type-check || npx tsc --noEmit

  # ================================
  # Unit Tests
  # ================================
  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          # cache: 'npm'  # Disabled - package-lock.json not tracked

      - name: Install dependencies
        run: npm install --legacy-peer-deps

      - name: Generate Prisma Client
        run: npx prisma generate

      - name: Run tests
        run: npm test -- --coverage --passWithNoTests
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://test:test@localhost:5432/test
          AUTH_SECRET: test-secret-key-minimum-32-characters-long

      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage/coverage-final.json
          flags: unittests
          fail_ci_if_error: false

  # ================================
  # Build Application
  # ================================
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          # cache: 'npm'  # Disabled - package-lock.json not tracked

      - name: Install dependencies
        run: npm install --legacy-peer-deps

      - name: Generate Prisma Client
        run: npx prisma generate

      - name: Build Next.js
        run: npm run build
        env:
          NODE_ENV: production
          DATABASE_URL: postgresql://placeholder:placeholder@localhost:5432/placeholder
          AUTH_SECRET: build-time-secret-key-minimum-32-characters-long

      - name: Check build output
        run: |
          if [ -d ".next" ]; then
            echo "‚úÖ Next.js build successful"
            echo "üìä Build artifacts:"
            ls -lh .next/ | head -10
          else
            echo "‚ùå Next.js build failed - .next directory not found"
            exit 1
          fi

  # ================================
  # Security Audit
  # ================================
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run npm audit
        run: npm audit --audit-level=moderate || true

      - name: Run Snyk Security Scan
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

  # ================================
  # Summary
  # ================================
  ci-success:
    name: CI Success
    runs-on: ubuntu-latest
    needs: [lint, test, build, security]
    if: success()
    steps:
      - name: Success message
        run: echo "‚úÖ All CI checks passed!"
