generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String                   @id @default(cuid())
  email              String
  emailLower         String                   @unique
  passwordHash       String
  emailVerifiedAt    DateTime?
  createdAt          DateTime                 @default(now())
  updatedAt          DateTime                 @updatedAt
  monthlyTokenUsed   Int                      @default(0)
  planTier           PlanTier                 @default(FREE)
  conversations      Conversation[]
  verificationTokens EmailVerificationToken[]
  resetTokens        PasswordResetToken[]
  subscriptions      Subscription[]
  tokenUsages        TokenUsage[]
  settings           UserSetting?
  payments           Payment[]
  usageRecords       DailyUsageRecord[]
  invoices           Invoice[]
}

model EmailVerificationToken {
  id        String   @id @default(cuid())
  userId    String
  tokenHash String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expiresAt])
}

model PasswordResetToken {
  id        String    @id @default(cuid())
  userId    String
  tokenHash String    @unique
  expiresAt DateTime
  createdAt DateTime  @default(now())
  usedAt    DateTime?
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expiresAt])
}

model Conversation {
  id           String       @id @default(cuid())
  userId       String
  title        String?      @db.VarChar(200)
  systemPrompt String?
  meta         Json?
  botId        String?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  model        String       @default("gpt-4o-mini")
  attachments  Attachment[]
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages     Message[]

  @@index([userId, updatedAt(sort: Desc)])
}

model Message {
  id               String       @id @default(cuid())
  conversationId   String
  role             Role
  content          String
  model            String?      @db.VarChar(100)
  promptTokens     Int?
  completionTokens Int?
  latencyMs        Int?
  idempotencyKey   String?
  createdAt        DateTime     @default(now())
  attachments      Attachment[]
  conversation     Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@unique([conversationId, idempotencyKey])
  @@index([conversationId, createdAt])
}

model Attachment {
  id             String       @id @default(cuid())
  conversationId String
  messageId      String
  kind           String       @db.VarChar(50)
  url            String
  meta           Json?
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  message        Message      @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@index([messageId])
  @@index([conversationId])
}

// CẬP NHẬT: Thêm các field mới cho Subscription
model Subscription {
  id                   String              @id @default(cuid())
  userId               String
  planTier             PlanTier
  status               SubscriptionStatus  @default(ACTIVE)
  currentPeriodStart   DateTime
  currentPeriodEnd     DateTime
  cancelAtPeriodEnd    Boolean            @default(false)
  canceledAt           DateTime?
  payosSubscriptionId  String?            @unique
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  user                 User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  payments             Payment[]

  @@index([userId, status])
  @@index([currentPeriodEnd])
}

// MỚI: Bảng Payment để lưu lịch sử thanh toán
model Payment {
  id                String         @id @default(cuid())
  userId            String
  subscriptionId    String?
  amount            Int            // Lưu theo VND (không có decimal)
  currency          String         @default("VND")
  status            PaymentStatus  @default(PENDING)
  payosOrderCode    Int?           @unique
  payosPaymentId    String?        @unique
  payosCheckoutUrl  String?
  description       String?
  metadata          Json?
  paidAt            DateTime?
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  user              User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  subscription      Subscription?  @relation(fields: [subscriptionId], references: [id])

  @@index([userId])
  @@index([status])
  @@index([payosOrderCode])
}

// MỚI: Bảng theo dõi sử dụng hàng ngày
model DailyUsageRecord {
  id              String   @id @default(cuid())
  userId          String
  date            DateTime @db.Date
  messageCount    Int      @default(0)
  modelUsed       String?  // Model chủ yếu được dùng trong ngày
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, date])
  @@index([userId, date])
}

// MỚI: Bảng Webhook Events để log và xử lý idempotency
model WebhookEvent {
  id               String              @id @default(cuid())
  externalId       String              @unique // ID từ PayOS
  eventType        String              // payment.success, payment.failed, etc.
  source           String              @default("payos")
  status           WebhookEventStatus  @default(PENDING)
  attempts         Int                 @default(0)
  processedAt      DateTime?
  errorMessage     String?
  rawPayload       Json
  createdAt        DateTime            @default(now())

  @@index([externalId])
  @@index([status])
}

// MỚI: Bảng Invoice cho hóa đơn
model Invoice {
  id             String          @id @default(cuid())
  userId         String
  invoiceNumber  String          @unique
  amount         Int
  currency       String          @default("VND")
  status         InvoiceStatus   @default(PENDING)
  issuedDate     DateTime        @default(now())
  paidDate       DateTime?
  dueDate        DateTime?
  metadata       Json?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([invoiceNumber])
}

model TokenUsage {
  id        String   @id @default(cuid())
  userId    String
  tokensIn  Int
  tokensOut Int
  costUsd   Float    @default(0)
  meta      Json?
  createdAt DateTime @default(now())
  model     ModelId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
}

model UserSetting {
  userId       String  @id
  theme        String?
  layoutConfig Json?
  defaultModel String?
  user         User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// ENUMS
enum Role {
  USER
  ASSISTANT
  SYSTEM
}

enum PlanTier {
  FREE
  PLUS
  PRO
}

// MỚI: Enum cho Subscription Status
enum SubscriptionStatus {
  ACTIVE
  CANCELLED
  EXPIRED
  PAST_DUE
  PAUSED
}

// MỚI: Enum cho Payment Status
enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
  CANCELLED
  REFUNDED
}

// MỚI: Enum cho Webhook Event Status
enum WebhookEventStatus {
  PENDING
  PROCESSED
  FAILED
  SKIPPED
}

// MỚI: Enum cho Invoice Status
enum InvoiceStatus {
  PENDING
  PAID
  CANCELLED
  REFUNDED
}

enum ModelId {
  gpt_4_turbo
  gpt_4o
  gpt_4o_mini
  gpt_3_5_turbo
  claude_3_opus
  claude_3_5_sonnet
  claude_3_5_haiku
  gemini_1_5_pro
  gemini_1_5_flash
  gemini_2_0_flash
  gpt5_thinking
  gpt5_mini
  gpt4o_mini
}