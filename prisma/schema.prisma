generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String                   @id @default(cuid())
  email              String
  emailLower         String                   @unique
  passwordHash       String
  emailVerifiedAt    DateTime?
  createdAt          DateTime                 @default(now())
  updatedAt          DateTime                 @updatedAt
  monthlyTokenUsed   Int                      @default(0)
  planTier           PlanTier                 @default(FREE)
  conversations      Conversation[]
  usageRecords       DailyUsageRecord[]
  verificationTokens EmailVerificationToken[]
  invoices           Invoice[]
  feedbacks          MessageFeedback[]
  resetTokens        PasswordResetToken[]
  payments           Payment[]
  projects           Project[]
  subscriptions      Subscription[]
  tokenUsages        TokenUsage[]
  settings           UserSetting?

  @@index([planTier])
  @@index([monthlyTokenUsed])
  @@index([createdAt])
  @@index([planTier, monthlyTokenUsed])
}

model EmailVerificationToken {
  id        String   @id @default(cuid())
  userId    String
  tokenHash String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expiresAt])
}

model PasswordResetToken {
  id        String    @id @default(cuid())
  userId    String
  tokenHash String    @unique
  expiresAt DateTime
  createdAt DateTime  @default(now())
  usedAt    DateTime?
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expiresAt])
}

model Project {
  id            String         @id @default(cuid())
  userId        String
  name          String         @db.VarChar(100)
  description   String?        @db.VarChar(500)
  color         String?        @db.VarChar(20)
  icon          String?        @db.VarChar(50)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  conversations Conversation[]
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, updatedAt(sort: Desc)])
}

model Conversation {
  id           String            @id @default(cuid())
  userId       String
  title        String?           @db.VarChar(200)
  systemPrompt String?
  meta         Json?
  botId        String?
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  model        String            @default("gpt-4o-mini")
  pinned       Boolean           @default(false)
  projectId    String?
  attachments  Attachment[]
  project      Project?          @relation(fields: [projectId], references: [id])
  user         User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages     Message[]
  feedbacks    MessageFeedback[]

  @@index([userId, updatedAt(sort: Desc)])
  @@index([userId, createdAt(sort: Desc)])
  @@index([userId, pinned, updatedAt(sort: Desc)])
  @@index([projectId, updatedAt(sort: Desc)])
  @@index([model])
  @@index([botId])
}

model Message {
  id               String            @id @default(cuid())
  conversationId   String
  role             Role
  content          String
  model            String?           @db.VarChar(100)
  promptTokens     Int?
  completionTokens Int?
  latencyMs        Int?
  idempotencyKey   String?
  createdAt        DateTime          @default(now())
  attachments      Attachment[]
  conversation     Conversation      @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  feedbacks        MessageFeedback[]

  @@unique([conversationId, idempotencyKey])
  @@index([conversationId, createdAt], map: "Message_conversationId_createdAt_asc_idx")
  @@index([conversationId, createdAt(sort: Desc)], map: "Message_conversationId_createdAt_desc_idx")
  @@index([role, conversationId])
  @@index([model])
  @@index([createdAt])
}

model MessageFeedback {
  id             String        @id @default(cuid())
  messageId      String
  userId         String
  conversationId String?
  feedback       String
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  conversation   Conversation? @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  message        Message       @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([messageId, userId])
  @@index([userId])
  @@index([conversationId])
}

model Attachment {
  id             String       @id @default(cuid())
  conversationId String
  messageId      String
  kind           String       @db.VarChar(50)
  url            String
  meta           Json?
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  message        Message      @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@index([messageId])
  @@index([conversationId])
}

model Subscription {
  id                  String             @id @default(cuid())
  userId              String
  planTier            PlanTier
  status              SubscriptionStatus @default(ACTIVE)
  currentPeriodStart  DateTime
  currentPeriodEnd    DateTime
  cancelAtPeriodEnd   Boolean            @default(false)
  canceledAt          DateTime?
  payosSubscriptionId String?            @unique
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  payments            Payment[]
  user                User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, status])
  @@index([currentPeriodEnd])
}

model Payment {
  id               String        @id @default(cuid())
  userId           String
  subscriptionId   String?
  amount           Int
  currency         String        @default("VND")
  status           PaymentStatus @default(PENDING)
  payosOrderCode   Int?          @unique
  payosPaymentId   String?       @unique
  payosCheckoutUrl String?
  description      String?
  metadata         Json?
  paidAt           DateTime?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  subscription     Subscription? @relation(fields: [subscriptionId], references: [id])
  user             User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
  @@index([payosOrderCode])
}

model DailyUsageRecord {
  id           String   @id @default(cuid())
  userId       String
  date         DateTime @db.Date
  messageCount Int      @default(0)
  modelUsed    String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, date])
  @@index([userId, date])
}

model WebhookEvent {
  id           String             @id @default(cuid())
  externalId   String             @unique
  eventType    String
  source       String             @default("payos")
  status       WebhookEventStatus @default(PENDING)
  attempts     Int                @default(0)
  processedAt  DateTime?
  errorMessage String?
  rawPayload   Json
  createdAt    DateTime           @default(now())

  @@index([externalId])
  @@index([status])
}

model Invoice {
  id            String        @id @default(cuid())
  userId        String
  invoiceNumber String        @unique
  amount        Int
  currency      String        @default("VND")
  status        InvoiceStatus @default(PENDING)
  issuedDate    DateTime      @default(now())
  paidDate      DateTime?
  dueDate       DateTime?
  metadata      Json?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([invoiceNumber])
}

model TokenUsage {
  id        String   @id @default(cuid())
  userId    String
  tokensIn  Int
  tokensOut Int
  costUsd   Float    @default(0)
  meta      Json?
  createdAt DateTime @default(now())
  model     ModelId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt], map: "TokenUsage_userId_createdAt_asc_idx")
  @@index([userId, createdAt(sort: Desc)], map: "TokenUsage_userId_createdAt_desc_idx")
  @@index([userId, model])
  @@index([model, createdAt])
  @@index([createdAt(sort: Desc)])
}

model ProviderMetrics {
  id           String     @id @default(cuid())
  provider     AIProvider
  model        ModelId
  latencyMs    Int
  costUsd      Float      @default(0)
  success      Boolean
  errorCode    String?    @db.VarChar(100)
  errorMessage String?
  userId       String?
  requestId    String?    @db.VarChar(100)
  tokensIn     Int?
  tokensOut    Int?
  createdAt    DateTime   @default(now())

  @@index([provider, createdAt(sort: Desc)])
  @@index([model, createdAt(sort: Desc)])
  @@index([success, createdAt(sort: Desc)])
  @@index([provider, model, createdAt(sort: Desc)])
  @@index([userId, createdAt(sort: Desc)])
}

model UserSetting {
  userId       String  @id
  theme        String?
  layoutConfig Json?
  defaultModel String?
  user         User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
  USER
  ASSISTANT
  SYSTEM
}

enum PlanTier {
  FREE
  PLUS
  PRO
}

enum SubscriptionStatus {
  ACTIVE
  CANCELLED
  EXPIRED
  PAST_DUE
  PAUSED
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
  CANCELLED
  REFUNDED
}

enum WebhookEventStatus {
  PENDING
  PROCESSED
  FAILED
  SKIPPED
}

enum InvoiceStatus {
  PENDING
  PAID
  CANCELLED
  REFUNDED
}

enum ModelId {
  gpt_4_turbo
  gpt_4o
  gpt_4o_mini
  gpt_4_1_nano
  gpt_3_5_turbo
  gpt_5
  gpt_5_mini
  gpt_5_nano
  claude_3_opus
  claude_3_5_sonnet
  claude_3_5_haiku
  gemini_1_5_pro
  gemini_1_5_flash
  gemini_2_0_flash
}

enum AIProvider {
  OPENAI
  ANTHROPIC
  GOOGLE
}
