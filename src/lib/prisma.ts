// src/lib/prisma.ts
import { PrismaClient } from '@prisma/client'

// Khai b√°o global ƒë·ªÉ tr√°nh TypeScript errors
declare global {
    // Cho ph√©p PrismaClient ƒë∆∞·ª£c l∆∞u trong globalThis
    var prisma: PrismaClient | undefined
}

// T·∫°o function ƒë·ªÉ kh·ªüi t·∫°o Prisma v·ªõi proper configuration
const prismaClientSingleton = () => {
    return new PrismaClient({
        log: process.env.NODE_ENV === 'development'
            ? ['query', 'error', 'warn']
            : ['error'],
        errorFormat: 'pretty',
    })
}

// S·ª≠ d·ª•ng singleton pattern ƒë·ªÉ tr√°nh multiple connections
// Trong development, l∆∞u instance v√†o global ƒë·ªÉ hot reload kh√¥ng t·∫°o connections m·ªõi
const prisma = globalThis.prisma ?? prismaClientSingleton()

if (process.env.NODE_ENV !== 'production') {
    globalThis.prisma = prisma
}

// Export m·∫∑c ƒë·ªãnh l√† prisma
export { prisma }

// Export alias 'db' ƒë·ªÉ backward compatibility v·ªõi code c≈©
export const db = prisma

// Helper function ƒë·ªÉ test database connection
export async function testDatabaseConnection(): Promise<boolean> {
    try {
        // Th·ª≠ k·∫øt n·ªëi v√† query ƒë∆°n gi·∫£n
        await prisma.$connect()
        await prisma.$queryRaw`SELECT 1`
        console.log('‚úÖ Database connected successfully')
        return true
    } catch (error) {
        console.error('‚ùå Database connection failed:', error)
        console.error('Please check your DATABASE_URL in .env file')
        return false
    }
}

// Graceful shutdown helper
export async function disconnectDatabase(): Promise<void> {
    try {
        await prisma.$disconnect()
        console.log('üìä Database disconnected')
    } catch (error) {
        console.error('Error disconnecting database:', error)
        // Force exit n·∫øu kh√¥ng th·ªÉ disconnect gracefully
        process.exit(1)
    }
}

// Handle process termination
if (process.env.NODE_ENV === 'production') {
    process.on('SIGINT', async () => {
        await disconnectDatabase()
        process.exit(0)
    })

    process.on('SIGTERM', async () => {
        await disconnectDatabase()
        process.exit(0)
    })
}