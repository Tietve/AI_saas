
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('@prisma/client/runtime/wasm-engine-edge.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.18.0
 * Query Engine version: 34b5a692b7bd79939a9a2c3ef97d816e749cda2f
 */
Prisma.prismaVersion = {
  client: "6.18.0",
  engine: "34b5a692b7bd79939a9a2c3ef97d816e749cda2f"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = Extensions.getExtensionContext
Prisma.defineExtension = Extensions.defineExtension

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}





/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.PasswordResetTokenScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  token: 'token',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  emailLower: 'emailLower',
  passwordHash: 'passwordHash',
  emailVerifiedAt: 'emailVerifiedAt',
  planTier: 'planTier',
  monthlyTokenUsed: 'monthlyTokenUsed',
  failedLoginAttempts: 'failedLoginAttempts',
  lastFailedLoginAt: 'lastFailedLoginAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.VerificationTokenScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  token: 'token',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt'
};

exports.Prisma.ConversationsScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  title: 'title',
  model: 'model',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MessagesScalarFieldEnum = {
  id: 'id',
  conversationId: 'conversationId',
  role: 'role',
  content: 'content',
  tokenCount: 'tokenCount',
  model: 'model',
  createdAt: 'createdAt'
};

exports.Prisma.PaymentsScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  stripePaymentId: 'stripePaymentId',
  stripeInvoiceId: 'stripeInvoiceId',
  amount: 'amount',
  currency: 'currency',
  status: 'status',
  planTier: 'planTier',
  description: 'description',
  failureMessage: 'failureMessage',
  paidAt: 'paidAt',
  createdAt: 'createdAt'
};

exports.Prisma.SubscriptionsScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  stripeSubscriptionId: 'stripeSubscriptionId',
  stripeCustomerId: 'stripeCustomerId',
  planTier: 'planTier',
  status: 'status',
  currentPeriodStart: 'currentPeriodStart',
  currentPeriodEnd: 'currentPeriodEnd',
  cancelAtPeriodEnd: 'cancelAtPeriodEnd',
  canceledAt: 'canceledAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.Token_usageScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  messageId: 'messageId',
  model: 'model',
  promptTokens: 'promptTokens',
  completionTokens: 'completionTokens',
  totalTokens: 'totalTokens',
  cost: 'cost',
  createdAt: 'createdAt'
};

exports.Prisma.Usage_alertsScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  threshold: 'threshold',
  triggered: 'triggered',
  triggeredAt: 'triggeredAt',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.PaymentStatus = exports.$Enums.PaymentStatus = {
  PENDING: 'PENDING',
  SUCCEEDED: 'SUCCEEDED',
  FAILED: 'FAILED',
  REFUNDED: 'REFUNDED'
};

exports.PlanTier = exports.$Enums.PlanTier = {
  FREE: 'FREE',
  PLUS: 'PLUS',
  PRO: 'PRO'
};

exports.SubscriptionStatus = exports.$Enums.SubscriptionStatus = {
  ACTIVE: 'ACTIVE',
  CANCELED: 'CANCELED',
  PAST_DUE: 'PAST_DUE',
  UNPAID: 'UNPAID',
  TRIALING: 'TRIALING'
};

exports.Prisma.ModelName = {
  PasswordResetToken: 'PasswordResetToken',
  User: 'User',
  VerificationToken: 'VerificationToken',
  conversations: 'conversations',
  messages: 'messages',
  payments: 'payments',
  subscriptions: 'subscriptions',
  token_usage: 'token_usage',
  usage_alerts: 'usage_alerts'
};
/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "D:\\my-saas-chat\\services\\billing-service\\node_modules\\@prisma\\client",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "library"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "windows",
        "native": true
      }
    ],
    "previewFeatures": [],
    "sourceFilePath": "D:\\my-saas-chat\\services\\billing-service\\prisma\\schema.prisma"
  },
  "relativeEnvPaths": {
    "rootEnvPath": null,
    "schemaEnvPath": "../../../.env"
  },
  "relativePath": "../../../prisma",
  "clientVersion": "6.18.0",
  "engineVersion": "34b5a692b7bd79939a9a2c3ef97d816e749cda2f",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "postgresql",
  "postinstall": false,
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "DATABASE_URL",
        "value": null
      }
    }
  },
  "inlineSchema": "generator client {\n  provider = \"prisma-client-js\"\n}\n\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\nmodel PasswordResetToken {\n  id        String   @id\n  userId    String   @unique\n  token     String   @unique\n  expiresAt DateTime\n  createdAt DateTime @default(now())\n\n  @@index([token])\n}\n\nmodel User {\n  id                  String          @id\n  email               String\n  emailLower          String          @unique\n  passwordHash        String\n  emailVerifiedAt     DateTime?\n  planTier            PlanTier        @default(FREE)\n  monthlyTokenUsed    Int             @default(0)\n  failedLoginAttempts Int             @default(0)\n  lastFailedLoginAt   DateTime?\n  createdAt           DateTime        @default(now())\n  updatedAt           DateTime\n  payments            payments[]\n  subscriptions       subscriptions[]\n\n  @@index([emailLower])\n  @@index([email])\n}\n\nmodel VerificationToken {\n  id        String   @id\n  userId    String   @unique\n  token     String   @unique\n  expiresAt DateTime\n  createdAt DateTime @default(now())\n\n  @@index([token])\n}\n\nmodel conversations {\n  id        String     @id\n  userId    String\n  title     String     @default(\"New Chat\")\n  model     String     @default(\"gpt-4\")\n  createdAt DateTime   @default(now())\n  updatedAt DateTime\n  messages  messages[]\n\n  @@index([createdAt])\n  @@index([userId])\n}\n\nmodel messages {\n  id             String        @id\n  conversationId String\n  role           String\n  content        String\n  tokenCount     Int           @default(0)\n  model          String?\n  createdAt      DateTime      @default(now())\n  conversations  conversations @relation(fields: [conversationId], references: [id], onDelete: Cascade)\n\n  @@index([conversationId])\n  @@index([createdAt])\n}\n\nmodel payments {\n  id              String        @id\n  userId          String\n  stripePaymentId String?       @unique\n  stripeInvoiceId String?\n  amount          Int\n  currency        String        @default(\"usd\")\n  status          PaymentStatus @default(PENDING)\n  planTier        PlanTier\n  description     String?\n  failureMessage  String?\n  paidAt          DateTime?\n  createdAt       DateTime      @default(now())\n  User            User          @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  @@index([createdAt])\n  @@index([status])\n  @@index([stripePaymentId])\n  @@index([userId])\n}\n\nmodel subscriptions {\n  id                   String             @id\n  userId               String\n  stripeSubscriptionId String?            @unique\n  stripeCustomerId     String?\n  planTier             PlanTier\n  status               SubscriptionStatus @default(ACTIVE)\n  currentPeriodStart   DateTime\n  currentPeriodEnd     DateTime\n  cancelAtPeriodEnd    Boolean            @default(false)\n  canceledAt           DateTime?\n  createdAt            DateTime           @default(now())\n  updatedAt            DateTime\n  User                 User               @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  @@index([status])\n  @@index([stripeSubscriptionId])\n  @@index([userId])\n}\n\nmodel token_usage {\n  id               String   @id\n  userId           String\n  messageId        String?\n  model            String\n  promptTokens     Int\n  completionTokens Int\n  totalTokens      Int\n  cost             Float    @default(0)\n  createdAt        DateTime @default(now())\n\n  @@index([createdAt])\n  @@index([userId])\n}\n\nmodel usage_alerts {\n  id          String    @id\n  userId      String\n  threshold   Int\n  triggered   Boolean   @default(false)\n  triggeredAt DateTime?\n  createdAt   DateTime  @default(now())\n\n  @@index([triggered])\n  @@index([userId])\n}\n\nenum PaymentStatus {\n  PENDING\n  SUCCEEDED\n  FAILED\n  REFUNDED\n}\n\nenum PlanTier {\n  FREE\n  PLUS\n  PRO\n}\n\nenum SubscriptionStatus {\n  ACTIVE\n  CANCELED\n  PAST_DUE\n  UNPAID\n  TRIALING\n}\n",
  "inlineSchemaHash": "151307ad065e8bc1422934497d65360e1ef63bc0f83e1cf6ec83a816ef781786",
  "copyEngine": true
}
config.dirname = '/'

config.runtimeDataModel = JSON.parse("{\"models\":{\"PasswordResetToken\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"token\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"expiresAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"User\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"email\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"emailLower\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"passwordHash\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"emailVerifiedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"planTier\",\"kind\":\"enum\",\"type\":\"PlanTier\"},{\"name\":\"monthlyTokenUsed\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"failedLoginAttempts\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"lastFailedLoginAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"payments\",\"kind\":\"object\",\"type\":\"payments\",\"relationName\":\"UserTopayments\"},{\"name\":\"subscriptions\",\"kind\":\"object\",\"type\":\"subscriptions\",\"relationName\":\"UserTosubscriptions\"}],\"dbName\":null},\"VerificationToken\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"token\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"expiresAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"conversations\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"model\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"messages\",\"kind\":\"object\",\"type\":\"messages\",\"relationName\":\"conversationsTomessages\"}],\"dbName\":null},\"messages\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"conversationId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"role\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"content\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"tokenCount\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"model\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"conversations\",\"kind\":\"object\",\"type\":\"conversations\",\"relationName\":\"conversationsTomessages\"}],\"dbName\":null},\"payments\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"stripePaymentId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"stripeInvoiceId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"amount\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"currency\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"PaymentStatus\"},{\"name\":\"planTier\",\"kind\":\"enum\",\"type\":\"PlanTier\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"failureMessage\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"paidAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"User\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"UserTopayments\"}],\"dbName\":null},\"subscriptions\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"stripeSubscriptionId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"stripeCustomerId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"planTier\",\"kind\":\"enum\",\"type\":\"PlanTier\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"SubscriptionStatus\"},{\"name\":\"currentPeriodStart\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"currentPeriodEnd\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"cancelAtPeriodEnd\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"canceledAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"User\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"UserTosubscriptions\"}],\"dbName\":null},\"token_usage\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"messageId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"model\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"promptTokens\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"completionTokens\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"totalTokens\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"cost\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"usage_alerts\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"threshold\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"triggered\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"triggeredAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null}},\"enums\":{},\"types\":{}}")
defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
config.engineWasm = {
  getRuntime: async () => require('./query_engine_bg.js'),
  getQueryEngineWasmModule: async () => {
    const loader = (await import('#wasm-engine-loader')).default
    const engine = (await loader).default
    return engine
  }
}
config.compilerWasm = undefined

config.injectableEdgeEnv = () => ({
  parsed: {
    DATABASE_URL: typeof globalThis !== 'undefined' && globalThis['DATABASE_URL'] || typeof process !== 'undefined' && process.env && process.env.DATABASE_URL || undefined
  }
})

if (typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined) {
  Debug.enable(typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined)
}

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)

