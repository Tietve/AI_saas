/**
 * Script ki·ªÉm tra UTF-8 encoding v√† Vietnamese text rendering
 * Ch·∫°y: node scripts/test-vietnamese-encoding.js
 */

const testStrings = {
    // Test d·∫•u thanh ƒëi·ªáu c∆° b·∫£n
    toneMarks: [
        '√° √† ·∫£ √£ ·∫°',
        '√© √® ·∫ª ·∫Ω ·∫π',
        '√≠ √¨ ·ªâ ƒ© ·ªã',
        '√≥ √≤ ·ªè √µ ·ªç',
        '√∫ √π ·ªß ≈© ·ª•',
        '√Ω ·ª≥ ·ª∑ ·ªπ ·ªµ'
    ],

    // Test ch·ªØ hoa c√≥ d·∫•u
    upperCase: [
        'ƒêI·ªÄU KI·ªÜN',
        'TI·∫æNG VI·ªÜT',
        'H·ªÜ TH·ªêNG',
        'C√îNG NGH·ªÜ',
        'PH√ÅT TRI·ªÇN'
    ],

    // Test c√°c k√Ω t·ª± ƒë·∫∑c bi·ªát ti·∫øng Vi·ªát
    specialChars: [
        'ƒÉ ·∫Ø ·∫± ·∫≥ ·∫µ ·∫∑',
        '√¢ ·∫• ·∫ß ·∫© ·∫´ ·∫≠',
        '√™ ·∫ø ·ªÅ ·ªÉ ·ªÖ ·ªá',
        '√¥ ·ªë ·ªì ·ªï ·ªó ·ªô',
        '∆° ·ªõ ·ªù ·ªü ·ª° ·ª£',
        '∆∞ ·ª© ·ª´ ·ª≠ ·ªØ ·ª±'
    ],

    // Test c√¢u vƒÉn th·ª±c t·∫ø
    sentences: [
        'Xin ch√†o! ƒê√¢y l√† ·ª©ng d·ª•ng chat AI.',
        'H·ªá th·ªëng ƒëang ho·∫°t ƒë·ªông ·ªïn ƒë·ªãnh.',
        'B·∫°n c√≥ c√¢u h·ªèi g√¨ kh√¥ng?',
        'C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng d·ªãch v·ª•.',
        'ƒê√£ c·∫≠p nh·∫≠t th√†nh c√¥ng!'
    ]
};

function testEncoding() {
    console.log('üáªüá≥ KI·ªÇM TRA ENCODING TI·∫æNG VI·ªÜT\n');
    console.log('='.repeat(60));

    let passedTests = 0;
    let totalTests = 0;

    // Test 1: Ki·ªÉm tra Buffer encoding
    console.log('\nüìù Test 1: Buffer UTF-8 Encoding');
    console.log('-'.repeat(60));

    testStrings.sentences.forEach((sentence, index) => {
        totalTests++;
        const buffer = Buffer.from(sentence, 'utf8');
        const decoded = buffer.toString('utf8');
        const passed = sentence === decoded;

        console.log(`${passed ? '‚úÖ' : '‚ùå'} Test ${index + 1}: ${sentence}`);
        if (passed) {
            passedTests++;
        } else {
            console.log(`   Expected: ${sentence}`);
            console.log(`   Got: ${decoded}`);
        }
    });

    // Test 2: Ki·ªÉm tra length v√† byte length
    console.log('\nüìè Test 2: String Length vs Byte Length');
    console.log('-'.repeat(60));

    const testText = 'Ti·∫øng Vi·ªát';
    totalTests++;
    const charLength = testText.length;
    const byteLength = Buffer.from(testText, 'utf8').length;
    const passed = byteLength > charLength; // UTF-8 uses more bytes for Vietnamese chars

    console.log(`Text: "${testText}"`);
    console.log(`Character length: ${charLength}`);
    console.log(`Byte length: ${byteLength}`);
    console.log(`${passed ? '‚úÖ' : '‚ùå'} Byte length > char length (correct for Vietnamese)`);

    if (passed) passedTests++;

    // Test 3: Ki·ªÉm tra normalize
    console.log('\nüî§ Test 3: Unicode Normalization');
    console.log('-'.repeat(60));

    const testNormalize = 'Ti·∫øng Vi·ªát';
    totalTests++;
    const nfc = testNormalize.normalize('NFC');
    const nfd = testNormalize.normalize('NFD');
    const normalizationWorks = nfc.length !== nfd.length;

    console.log(`Original: "${testNormalize}"`);
    console.log(`NFC form length: ${nfc.length}`);
    console.log(`NFD form length: ${nfd.length}`);
    console.log(`${normalizationWorks ? '‚úÖ' : '‚ùå'} Normalization works correctly`);

    if (normalizationWorks) passedTests++;

    // Test 4: Ki·ªÉm tra regex v·ªõi ti·∫øng Vi·ªát
    console.log('\nüîç Test 4: Regex Pattern Matching');
    console.log('-'.repeat(60));

    const vietnameseRegex = /[√†√°·∫£√£·∫°ƒÉ·∫Ø·∫±·∫≥·∫µ·∫∑√¢·∫•·∫ß·∫©·∫´·∫≠√®√©·∫ª·∫Ω·∫π√™·∫ø·ªÅ·ªÉ·ªÖ·ªá√¨√≠·ªâƒ©·ªã√≤√≥·ªè√µ·ªç√¥·ªë·ªì·ªï·ªó·ªô∆°·ªõ·ªù·ªü·ª°·ª£√π√∫·ªß≈©·ª•∆∞·ª©·ª´·ª≠·ªØ·ª±·ª≥√Ω·ª∑·ªπ·ªµƒë]/i;

    testStrings.sentences.forEach((sentence, index) => {
        totalTests++;
        const hasVietnamese = vietnameseRegex.test(sentence);
        console.log(`${hasVietnamese ? '‚úÖ' : '‚ùå'} Test ${index + 1}: Detected Vietnamese in "${sentence}"`);
        if (hasVietnamese) passedTests++;
    });

    // Test 5: Ki·ªÉm tra JSON stringify/parse
    console.log('\nüì¶ Test 5: JSON Stringify/Parse');
    console.log('-'.repeat(60));

    const testObject = {
        title: '·ª®ng d·ª•ng Chat AI',
        description: 'Tr·ª£ l√Ω th√¥ng minh',
        messages: testStrings.sentences
    };

    totalTests++;
    try {
        const json = JSON.stringify(testObject);
        const parsed = JSON.parse(json);
        const passed = JSON.stringify(parsed) === json;

        console.log(`${passed ? '‚úÖ' : '‚ùå'} JSON round-trip successful`);
        if (passed) passedTests++;
    } catch (error) {
        console.log(`‚ùå JSON test failed: ${error.message}`);
    }

    // Test 6: Hi·ªÉn th·ªã t·∫•t c·∫£ c√°c d·∫•u thanh ƒëi·ªáu
    console.log('\nüéØ Test 6: Display All Tone Marks');
    console.log('-'.repeat(60));

    console.log('D·∫•u s·∫Øc:', testStrings.toneMarks[0]);
    console.log('D·∫•u huy·ªÅn:', testStrings.toneMarks[1]);
    console.log('D·∫•u h·ªèi:', testStrings.toneMarks[2]);
    console.log('D·∫•u ng√£:', testStrings.toneMarks[3]);
    console.log('D·∫•u n·∫∑ng:', testStrings.toneMarks[4]);

    totalTests++;
    passedTests++; // Visual check
    console.log('‚úÖ All tone marks displayed');

    // K·∫øt qu·∫£ cu·ªëi c√πng
    console.log('\n' + '='.repeat(60));
    console.log('üìä K·∫æT QU·∫¢ KI·ªÇM TRA\n');
    console.log(`T·ªïng s·ªë test: ${totalTests}`);
    console.log(`Passed: ${passedTests}`);
    console.log(`Failed: ${totalTests - passedTests}`);
    console.log(`Success rate: ${((passedTests / totalTests) * 100).toFixed(2)}%`);

    if (passedTests === totalTests) {
        console.log('\nüéâ T·∫§T C·∫¢ TEST PASSED! UTF-8 encoding ho·∫°t ƒë·ªông ho√†n h·∫£o.');
    } else {
        console.log('\n‚ö†Ô∏è  C√ì M·ªòT S·ªê TEST FAILED. Vui l√≤ng ki·ªÉm tra l·∫°i.');
    }

    console.log('\n' + '='.repeat(60));
}

// Run tests
testEncoding();

// Export test data for use in other tests
module.exports = {
    testStrings,
    testEncoding
};
