# ==========================================
# Azure App Service Deployment - Backend API
# ==========================================
# Deploys Next.js + Prisma backend to Azure App Service
# Triggered on: push to main branch
#
# Prerequisites:
# 1. Azure App Service created (firbox-api)
# 2. Publish Profile downloaded from Azure Portal
# 3. GitHub Secrets configured:
#    - AZURE_PUBLISH_PROFILE: Content of .PublishSettings file
#    - DATABASE_URL: PostgreSQL connection string (for Prisma generate)
#
# App Configuration:
# - Name: firbox-api
# - Runtime: Node.js 20 LTS
# - Framework: Next.js 15
# - Database: PostgreSQL (Neon)
# ==========================================

name: Deploy Azure Web App (firbox-api)

# ==========================================
# TRIGGER
# ==========================================
# Runs when code is pushed to main branch
on:
  push:
    branches:
      - main

  # Allow manual trigger from GitHub Actions tab
  workflow_dispatch:

# ==========================================
# ENVIRONMENT VARIABLES
# ==========================================
env:
  AZURE_WEBAPP_NAME: firbox-api           # Azure App Service name
  AZURE_WEBAPP_PACKAGE_PATH: '.'          # Path to app (root directory)
  NODE_VERSION: '20.x'                    # Node.js version

# ==========================================
# JOBS
# ==========================================
jobs:
  build-and-deploy:
    name: Build and Deploy to Azure
    runs-on: ubuntu-latest

    steps:
      # ----------------------------------------
      # Step 1: Checkout Code
      # ----------------------------------------
      # Downloads repository code to runner
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for potential versioning

      # ----------------------------------------
      # Step 2: Setup Node.js
      # ----------------------------------------
      # Configures Node.js environment
      - name: 🔧 Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          # cache: 'npm'  # Disabled - package-lock.json not tracked

      # ----------------------------------------
      # Step 3: Export DATABASE_URL
      # ----------------------------------------
      # Export DATABASE_URL to $GITHUB_ENV so all subsequent steps can access it
      # This ensures Prisma Client can connect during build-time operations
      - name: 🔑 Export DATABASE_URL for pipeline
        run: |
          echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> $GITHUB_ENV
          echo "✅ DATABASE_URL exported to pipeline environment"

      # ----------------------------------------
      # Step 4: Install Dependencies
      # ----------------------------------------
      # Installs all npm packages including dev dependencies
      # (needed for build tools, TypeScript, Prisma CLI, etc.)
      # Uses --legacy-peer-deps to handle Storybook version conflicts
      - name: 📦 Install dependencies
        run: npm ci --include=dev --legacy-peer-deps

      # ----------------------------------------
      # Step 5: Generate Prisma Client
      # ----------------------------------------
      # Generates Prisma Client for database access
      # Uses DATABASE_URL from $GITHUB_ENV (set in Step 3)
      # NOTE: We only generate, NOT migrate (migration handled separately)
      - name: 🗄️ Generate Prisma Client
        run: |
          echo "🔍 Verifying DATABASE_URL is set..."
          if [ -z "$DATABASE_URL" ]; then
            echo "❌ ERROR: DATABASE_URL is not set!"
            echo "Please add DATABASE_URL to GitHub Secrets"
            exit 1
          fi
          echo "✅ DATABASE_URL is set (length: ${#DATABASE_URL} chars)"

          echo "🗄️ Generating Prisma Client..."
          npx prisma generate

      # ----------------------------------------
      # Step 6: Build Application
      # ----------------------------------------
      # Runs Next.js production build
      # Creates optimized .next directory
      # DATABASE_URL available from $GITHUB_ENV (set in Step 3)
      # IMPORTANT: Build BEFORE pruning dev deps (needs tailwindcss, postcss, etc.)
      - name: 🏗️ Build Next.js application
        env:
          NODE_ENV: production
        run: |
          echo "🔍 Verifying DATABASE_URL for build..."
          if [ -z "$DATABASE_URL" ]; then
            echo "❌ ERROR: DATABASE_URL is not set for build!"
            exit 1
          fi
          echo "✅ DATABASE_URL verified (length: ${#DATABASE_URL} chars)"

          echo "🏗️ Building Next.js application..."
          npm run build

      # ----------------------------------------
      # Step 7: Prune Dev Dependencies
      # ----------------------------------------
      # Remove dev dependencies from node_modules AFTER build completes
      # This keeps the generated Prisma Client intact
      # Dev deps (tailwindcss, postcss, typescript) no longer needed after build
      - name: 🧹 Prune dev dependencies
        run: |
          echo "🧹 Removing dev dependencies after build..."
          npm prune --omit=dev --legacy-peer-deps
          echo "✅ Dev dependencies removed"

      # ----------------------------------------
      # Step 8: Prepare Deployment Package
      # ----------------------------------------
      # Creates deployment package by copying all necessary files
      # node_modules already contains only production deps + Prisma Client (from Step 7)
      - name: 📦 Create deployment package
        run: |
          echo "📋 Creating deployment package..."

          # Create deployment directory
          mkdir -p deployment

          # Copy essential files
          echo "📦 Copying package files..."
          cp package.json deployment/
          cp package-lock.json deployment/
          cp next.config.js deployment/ || echo "⚠️ next.config.js not found"
          cp tsconfig.json deployment/ || echo "⚠️ tsconfig.json not found"

          # Copy source code (REQUIRED for Next.js without standalone mode)
          echo "📦 Copying source code..."
          cp -r src deployment/

          # Copy built application
          echo "📦 Copying .next build output..."
          cp -r .next deployment/

          # Copy Prisma schema
          echo "📦 Copying Prisma schema..."
          mkdir -p deployment/prisma
          cp prisma/schema.prisma deployment/prisma/

          # Copy public assets (if exists)
          if [ -d "public" ]; then
            echo "📦 Copying public assets..."
            cp -r public deployment/
          fi

          # Copy production node_modules (already pruned in Step 6)
          # This includes generated Prisma Client
          echo "📦 Copying production node_modules..."
          cp -r node_modules deployment/

          echo "✅ Deployment package created"
          echo "📊 Package contents:"
          ls -la deployment/

      # ----------------------------------------
      # Step 9: Create Deployment Archive
      # ----------------------------------------
      # Zips the deployment package for upload
      - name: 📦 Zip deployment package
        run: |
          cd deployment
          zip -r ../deployment.zip . -q
          cd ..

          echo "📊 Package size:"
          ls -lh deployment.zip

      # ----------------------------------------
      # Step 10: Deploy to Azure App Service
      # ----------------------------------------
      # Uploads and deploys the package to Azure
      # Uses Publish Profile from GitHub Secrets
      - name: 🚀 Deploy to Azure App Service
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          publish-profile: ${{ secrets.AZURE_PUBLISH_PROFILE }}
          package: deployment.zip

      # ----------------------------------------
      # Step 11: Verify Deployment
      # ----------------------------------------
      # Checks if the deployed app is responding
      - name: ✅ Verify deployment
        run: |
          echo "🔍 Waiting for deployment to complete..."
          sleep 30

          echo "🧪 Testing health endpoint..."
          RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net/api/health || echo "000")

          if [ "$RESPONSE" = "200" ]; then
            echo "✅ Deployment successful! Health check passed."
            echo "🌐 App URL: https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net"
          else
            echo "⚠️ Health check returned HTTP $RESPONSE"
            echo "🔍 Check Azure App Service logs for details"
            echo "📍 Portal: https://portal.azure.com"
          fi

      # ----------------------------------------
      # Step 12: Cleanup
      # ----------------------------------------
      # Removes temporary files
      - name: 🧹 Cleanup
        if: always()
        run: |
          rm -rf deployment
          rm -f deployment.zip
          echo "✅ Cleanup completed"

# ==========================================
# DEPLOYMENT NOTES
# ==========================================
#
# Environment Variables in Azure:
# ───────────────────────────────────────
# These should be configured in Azure Portal:
# → App Service → Configuration → Application Settings
#
# Required:
#   - DATABASE_URL: PostgreSQL connection string
#   - AUTH_SECRET: JWT secret (64+ chars)
#   - OPENAI_API_KEY: OpenAI API key
#   - UPSTASH_REDIS_REST_URL: Redis URL
#   - UPSTASH_REDIS_REST_TOKEN: Redis token
#   - NODE_ENV: production
#   - WEBSITE_NODE_DEFAULT_VERSION: 20-lts
#
# Optional:
#   - SMTP_HOST, SMTP_USER, SMTP_PASS: Email
#   - SENTRY_DSN: Error tracking
#   - R2_* or AZURE_STORAGE_*: File storage
#   - PAYOS_*: Payment gateway
#
# Startup Command:
# ───────────────────────────────────────
# Set in Azure Portal → Configuration → General Settings
# → Startup Command: npm start
#
# OR in package.json scripts:
#   "start": "next start -p $PORT"
#
# Azure will automatically set PORT environment variable.
#
# Post-Deployment:
# ───────────────────────────────────────
# 1. Verify app is running:
#    https://firbox-api.azurewebsites.net/api/health
#
# 2. Check logs (if issues):
#    → Azure Portal → App Service → Log stream
#    → OR: az webapp log tail --name firbox-api --resource-group firbox-rg
#
# 3. Monitor:
#    → Azure Portal → App Service → Metrics
#    → Application Insights (if configured)
#
# Database Migrations:
# ───────────────────────────────────────
# This workflow does NOT run migrations automatically.
# Run migrations manually when needed:
#
# Option 1: Azure CLI
#   az webapp ssh --name firbox-api --resource-group firbox-rg
#   cd site/wwwroot
#   npx prisma migrate deploy
#
# Option 2: Local with production DB
#   DATABASE_URL="postgresql://..." npx prisma migrate deploy
#
# Option 3: Separate migration workflow
#   Create .github/workflows/migrate.yml for manual trigger
#
# Troubleshooting:
# ───────────────────────────────────────
# Issue: Deployment succeeds but app doesn't start
# → Check: Azure Portal → App Service → Log stream
# → Check: Startup command is set correctly
# → Verify: All required env vars are set
#
# Issue: "Module not found" errors
# → Check: node_modules included in deployment.zip
# → Verify: npm ci ran successfully in deployment step
#
# Issue: Prisma Client errors
# → Check: DATABASE_URL is set in Azure
# → Verify: Prisma Client was generated during build
# → Check: @prisma/client version matches prisma CLI
#
# Issue: Build takes too long
# → Enable GitHub Actions cache (already enabled)
# → Consider using npm ci instead of npm install
# → Review dependencies for optimization
#
# ==========================================
